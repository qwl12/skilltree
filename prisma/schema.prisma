generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
  comments  Comment[]
  courses   Course[] @relation("TeacherCourses")
  enrollments Enrollment[]
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  followers   Follow[] @relation("followers")
  following   Follow[] @relation("following")
  testResults TestResult[]
  resetTokens             PasswordResetToken[]
  votes      CommentVote[]
}

model Role {
  id    String @id @default(cuid())
  type  String @unique
  users User[]
}

model Follow {
  id           String   @id @default(cuid())
  followerId   String
  followingId  String
  createdAt    DateTime @default(now())

  follower     User     @relation("following", fields: [followerId], references: [id])
  following    User     @relation("followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}



model Category {
  id           String        @id @default(cuid())
  name         String        @unique
  subcategories Subcategory[]
  courses      Course[]
}

model Subcategory {
  id          String        @id @default(cuid())
  name        String        @unique
  categoryId  String
  category    Category      @relation(fields: [categoryId], references: [id])
  courses     Course[]
}

model Course {
  id            String       @id @default(cuid())
  title         String
  image         String?
  description   String
  aboutCourse   String?
  approved      Boolean @default(false)
  difficulty    String?
  categoryId    String?
  category      Category?    @relation(fields: [categoryId], references: [id])
  subcategoryId String?
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  subscribers   Int @default(0)
  teacherId     String
  duration      Int?
  teacher       User         @relation("TeacherCourses", fields: [teacherId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  tags          CourseTag[]
  modules       Module[]
  enrollments   Enrollment[]
  comments      Comment[]
  files         File[]

}

model Module {
  id        String    @id @default(cuid())
  courseId  String
  title     String?
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  description String
  order     Int
  lectures    Lecture[]  @relation("ModuleLectures") // —Å–≤—è–∑—å —Å –ª–µ–∫—Ü–∏—è–º–∏
  tests     Test[]
}

model Lecture {
  id         String    @id @default(cuid()) // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–µ–∫—Ü–∏–∏
  title      String    // –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–∏
  content    String    // —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–µ–∫—Ü–∏–∏
  order      Int       // –ø–æ—Ä—è–¥–æ–∫ –ª–µ–∫—Ü–∏–∏ –≤ –º–æ–¥—É–ª–µ
  moduleId   String    // ID –º–æ–¥—É–ª—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–µ–∫—Ü–∏—è
  module     Module    @relation("ModuleLectures", fields: [moduleId], references: [id], onDelete: Cascade) // —Å–≤—è–∑—å —Å –º–æ–¥—É–ª–µ–º
  comments   Comment[] // —Å–≤—è–∑—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ –∫ –ª–µ–∫—Ü–∏–∏
  fileUrl    String?
  files      File[]    @relation("LectureFile") // —Å–≤—è–∑—å —Å —Ñ–∞–π–ª–∞–º–∏
}




model Test {
  id        String     @id @default(cuid())
  title     String
  moduleId  String
  module    Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  questions Question[]
  duration  Int?       // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
  testResults TestResult[]
}
model Question {
  id           String   @id @default(cuid())
  questionText String
  testId       String
  test         Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  answers      Answer[] @relation("QuestionAnswers")
  questionType String   
  userAnswers  UserAnswer[] // üîß –¥–æ–±–∞–≤–∏–ª–∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
}

model Answer {
  id           String  @id @default(cuid())
  text         String
  isCorrect    Boolean
  questionId   String
  question     Question @relation("QuestionAnswers", fields: [questionId], references: [id], onDelete: Cascade)
}

model TestResult {
  id        String   @id @default(cuid())
  test      Test     @relation(fields: [testId], references: [id])
  testId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  score     Int
  createdAt DateTime @default(now())
  answers   UserAnswer[]

  @@unique([testId, userId], name: "testId_userId")
}

model UserAnswer {
  id            String      @id @default(cuid())
  result        TestResult  @relation(fields: [resultId], references: [id])
  resultId      String
  question      Question    @relation(fields: [questionId], references: [id])
  questionId    String
  selectedIds   String[]    // –¥–ª—è multiple/single
  inputAnswer   String?     // –¥–ª—è input
}


model Comment {
  id         String     @id @default(cuid())
  content    String
  createdAt  DateTime   @default(now())
  courseId   String
  course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lectureId  String?
  lecture    Lecture?   @relation(fields: [lectureId], references: [id])
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  parentId   String?    
  parent     Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[]  @relation("CommentReplies")
  votes      CommentVote[]
}

model CommentVote {
  id         String   @id @default(cuid())
  userId     String
  commentId  String
  value      Int      // +1 –∏–ª–∏ -1

  user       User     @relation(fields: [userId], references: [id])
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model File {
  id           String   @id @default(cuid()) // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
  url          String   // URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
  originalName String   // –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
  uploadedAt   DateTime @default(now()) // –¥–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  courseId     String?  // ID –∫—É—Ä—Å–∞ (–µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫—É—Ä—Å—É)
  course       Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade) // —Å–≤—è–∑—å —Å —Ç–∞–±–ª–∏—Ü–µ–π Course (–µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫—É—Ä—Å—É)
  lectureId    String?  // ID –ª–µ–∫—Ü–∏–∏ (–µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ª–µ–∫—Ü–∏–∏)
  lecture      Lecture? @relation("LectureFile", fields: [lectureId], references: [id]) // —Å–≤—è–∑—å —Å —Ç–∞–±–ª–∏—Ü–µ–π Lecture (–µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ª–µ–∫—Ü–∏–∏)
}


model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])  // —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø–∞—Ä—ã userId –∏ courseId
}

model Tag {
  id   String  @id @default(cuid())
  name String  @unique
  courses CourseTag[]
}

model CourseTag {
  id       String  @id @default(cuid())
  courseId String
  tagId    String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id])

  @@unique([courseId, tagId])  // —Å–æ—Å—Ç–∞–≤–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

 
model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
 
}
model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
}